program H : P : takes L5, a : boolean array; w : integer array; M, C9, v : integer array; M, s9g, z0 : boolean; ic : boolean array returns nothing Y, Axk, I7 : integer array; So9aa, I4v0a : integer array; t : integer; rd2a, e : boolean; chillax end j020 : takes C, H, A, W0, q : boolean returns nothing q : boolean; while - 375 >= 35 : when case 0 : chillax end end; while 63 : chillax end end H1 : takes a, XE : boolean array; i7n, eS : boolean returns boolean array output 40 end N6K : takes P0 : boolean returns boolean array c, R8P : boolean; LP50 : boolean; Qn : boolean; chillax end H : takes Bb : boolean returns boolean array j : boolean; chillax end main : when case - true / 8030 >= - 2 - false and 52 : input eY00[1 - 5]; output "" . 5; pop end case - P18[58] = - (11) and 150 : when case 1 = 0 : chillax end case 39 : chillax end end case jBM : chillax end case 01000 - 36 = 47 : chillax end case 23 : chillax end; let J[- false - true] = array - 6 rem s or G and 4; when case - (2) /= - 01 : chillax end; do H(83, 2 = 60, 60000); input Jox; do l(784); input C; pop end
