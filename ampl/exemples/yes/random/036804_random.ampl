program s : N : takes MSVaa : boolean; n : integer array; N1 : boolean array returns nothing TR, u00a : integer; y : boolean array; chillax end Q : takes _, C4, x : integer array returns nothing r, kI8, G60a : boolean array; A, a, aO : integer; Y, E : boolean; g : boolean; input l[- 2]; when case 6 : while 793 : chillax end; pop end; when case 1 : pop end case 9000 : chillax end; pop; when case 9 : chillax end end K : takes v : integer; j, Ba : integer array; gJ5, O, ENB : boolean; Zm : boolean array; L : boolean; N1 : boolean; dU : boolean returns integer array chillax end Oh : takes P, n : integer array; D : integer returns nothing when case 96 : pop end case 2 : chillax end otherwise : chillax end end L : takes N, P2 : boolean array returns boolean FM : boolean; do qX(825); let __0 = 56 end main : while - 83 /= true * 0 and 0 : do Z8(- 9 - 9, 606 = 29) end end
