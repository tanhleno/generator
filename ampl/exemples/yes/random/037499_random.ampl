program Ha : I840 : takes g : boolean array; Q5Ra, o, a6, K, W5Ca, e, r : integer returns nothing TbP : integer array; do lOo(- Z and 1 or 76 - 661 < - 2, - 80, 8) end SZ : takes c, f7 : integer; UU, F : integer returns nothing k3 : integer array; A, m8 : integer array; rz10, c : boolean; while 9 : when case 76 : chillax end end; pop 9; when case 86 : chillax end case 5 : chillax end otherwise : chillax end; output "" end W : takes X, Y, e, F : integer; u : integer; J, d0 : boolean array; u, Q9T, p : integer; XO8, o : boolean returns nothing Kx, ZoM, inTa : boolean; O, i : boolean; WI : boolean; O : boolean; chillax end R9 : takes S8, z4 : integer array returns nothing O2 : boolean; u8 : boolean; C : boolean; when case 26 : chillax end; while 2 : chillax end; let v0 = 45; pop end Ru : takes aTQ, I : boolean returns integer array F33a : boolean; chillax end gF6a : takes K2, e : integer array returns integer array let I = 9 end main : input j6[(687 = 9040) * qw(0) / 613 and 20]; do q(not true < C and 5, - (3) and 1 <= - 22 - 19, - 1 - 1 <= 90, 999 = 68, 4900); pop - 9 - 8; when case - 42 - 19800 >= 2 : chillax end case 2 : chillax end; when case 7850 : chillax end case 77 : chillax end case 57 : chillax end otherwise : pop end end
