program E : h : takes j : integer; UV, av40a : integer array; h, gH, Ds, A : integer array; x : boolean; Q2 : boolean array; t6P, vXd0a : boolean; Z730, V7 : boolean; kb : boolean; INQ : boolean returns boolean array let U[- false and 86] = - 2 - 6 > 03 end k : takes Bh2, W3 : boolean array; y : boolean array; x, I : integer; o, U : integer array returns nothing ER7aa, Z : boolean array; l4, vuWaa, X : boolean array; YP2, g9 : boolean; when case 0 - 9 : chillax end otherwise : while 30 : chillax end; pop end; when case 72 = 5 : chillax end case 8 : pop end case 4750 : chillax end otherwise : chillax end; do t(4, 36) end s : takes B750a, Z2, n070a, aTa, p940, Bj : integer array returns nothing chillax end T : takes Mh, L : boolean; l : boolean; p, n : integer array returns integer b8 : boolean; chillax end main : pop - not false and not 04 and 2 > N end
