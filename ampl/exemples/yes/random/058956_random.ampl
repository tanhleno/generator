program v : K0 : takes uD : integer array returns integer array i : integer array; N0M, N : integer; chillax end c5 : takes Q9, Hj : boolean array returns boolean F, z : integer; let b[- 1 - 92200] = array - 2 - 8; when case 40 = 5 : let s2 = 1890; pop end case 4 : chillax end case 6 : chillax end; when case 38200 : pop end otherwise : chillax end; while 54 : chillax end; while 11 : chillax end end lJ : takes T : boolean returns nothing chillax end V : takes n : integer array; a : integer; V, V9 : integer array returns integer x : boolean; W0 : boolean; P : boolean; chillax end w : takes B9 : integer array; H6 : boolean array; l48a : boolean; M8 : boolean returns integer array G : boolean; Siy : boolean; chillax end U9E : takes cvY0a, Sb : integer array; Z1J0a : boolean; Qm : boolean returns boolean u : boolean; chillax end E1 : takes pBg, k : boolean returns boolean Nu : boolean; pop end l : takes gqo : boolean returns boolean chillax end E5T0 : takes c : boolean returns nothing chillax end main : while - 85 and not not 61 : do C(- 1 - 58); output 7350 . 9; while 7 : pop end end end
